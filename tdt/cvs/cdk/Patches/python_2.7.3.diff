--- python-2.7.3.org/configure	2012-04-10 01:07:29.000000000 +0200
+++ python-2.7.3/configure	2012-11-16 20:14:43.754806446 +0100
@@ -13673,7 +13673,7 @@
   $as_echo_n "(cached) " >&6
 else
   if test "$cross_compiling" = yes; then :
-  ac_cv_have_long_long_format=no
+  ac_cv_have_long_long_format="cross -- assuming yes"
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
@@ -13725,7 +13725,7 @@
 $as_echo "$ac_cv_have_long_long_format" >&6; }
 fi
 
-if test "$ac_cv_have_long_long_format" = yes
+if test "$ac_cv_have_long_long_format" != no
 then
 
 $as_echo "#define PY_FORMAT_LONG_LONG \"ll\"" >>confdefs.h
diff -Nur '--exclude-from=diff-ignore' python-2.7.3.org/configure.in python-2.7.3/configure.in
--- python-2.7.3.org/configure.in	2012-04-10 01:07:36.000000000 +0200
+++ python-2.7.3/configure.in	2012-11-18 13:32:01.396962900 +0100
@@ -3139,7 +3139,7 @@
 
 AC_MSG_RESULT($ac_cv_buggy_getaddrinfo)
 
-if test $have_getaddrinfo = no -o "$ac_cv_buggy_getaddrinfo" = yes
+if test $have_getaddrinfo = no -o "$ac_cv_buggy_getaddrinfo" = yes -a x"$cross_compiling" != "xyes"
 then
 	if test $ipv6 = yes
 	then
@@ -4222,7 +4222,7 @@
   ]]])],
   [ac_cv_have_long_long_format=yes],
   [ac_cv_have_long_long_format=no],
-  [ac_cv_have_long_long_format=no])
+  [ac_cv_have_long_long_format=yes])
   )
   AC_MSG_RESULT($ac_cv_have_long_long_format)
 fi
@@ -4287,7 +4287,7 @@
 
 AC_CHECK_TYPE(socklen_t,,
   AC_DEFINE(socklen_t,int,
-            [Define to `int' if <sys/socket.h> does not define.]),[
+            [Define to 'int' if <sys/socket.h> does not define.]),[
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
diff -Nur '--exclude-from=diff-ignore' python-2.7.3.org/Include/pyport.h python-2.7.3/Include/pyport.h
--- python-2.7.3.org/Include/pyport.h	2012-04-10 01:07:29.000000000 +0200
+++ python-2.7.3/Include/pyport.h	2012-11-18 13:32:01.396962900 +0100
@@ -846,7 +846,7 @@
  * rather than waiting for integer multiplication to trigger bogus
  * overflows.
  */
-#error "LONG_BIT definition appears wrong for platform (bad gcc/glibc config?)."
+/* #error "LONG_BIT definition appears wrong for platform (bad gcc/glibc config?)." */
 #endif
 
 #ifdef __cplusplus
diff -Nur '--exclude-from=diff-ignore' python-2.7.3.org/Lib/distutils/command/build_ext.py python-2.7.3/Lib/distutils/command/build_ext.py
--- python-2.7.3.org/Lib/distutils/command/build_ext.py	2012-04-10 01:07:29.000000000 +0200
+++ python-2.7.3/Lib/distutils/command/build_ext.py	2012-11-18 13:32:01.396962900 +0100
@@ -437,7 +437,8 @@
         # "build" tree.
         outputs = []
         for ext in self.extensions:
-            outputs.append(self.get_ext_fullpath(ext.name))
+            fullname = self.get_ext_fullname(ext.name)
+            outputs.append(os.path.join(self.build_lib, self.get_ext_filename(fullname)))
         return outputs
 
     def build_extensions(self):
@@ -456,9 +457,22 @@
                    "a list of source filenames") % ext.name
         sources = list(sources)
 
-        ext_path = self.get_ext_fullpath(ext.name)
+        fullname = self.get_ext_fullname(ext.name)
+        if self.inplace:
+            # ignore build-lib -- put the compiled extension into
+            # the source tree along with pure Python modules
+
+            modpath = string.split(fullname, '.')
+            package = string.join(modpath[0:-1], '.')
+            base = modpath[-1]
+
+            build_py = self.get_finalized_command('build_py')
+            package_dir = build_py.get_package_dir(package)
+            ext_filename = os.path.join(package_dir, self.get_ext_filename(base))
+        else:
+            ext_filename = os.path.join(self.build_lib, self.get_ext_filename(fullname))
         depends = sources + ext.depends
-        if not (self.force or newer_group(depends, ext_path, 'newer')):
+        if not (self.force or newer_group(depends, ext_filename, 'newer')):
             log.debug("skipping '%s' extension (up-to-date)", ext.name)
             return
         else:
@@ -519,7 +533,7 @@
         language = ext.language or self.compiler.detect_language(sources)
 
         self.compiler.link_shared_object(
-            objects, ext_path,
+            objects, ext_filename,
             libraries=self.get_libraries(ext),
             library_dirs=ext.library_dirs,
             runtime_library_dirs=ext.runtime_library_dirs,
@@ -530,7 +544,7 @@
             target_lang=language)
 
 
-    def swig_sources (self, sources, extension):
+    def swig_sources (self, sources, extension=None):
 
         """Walk the list of source files in 'sources', looking for SWIG
         interface (.i) files.  Run SWIG on all that are found, and
diff -Nur '--exclude-from=diff-ignore' python-2.7.3.org/Lib/plat-linux3/regen python-2.7.3/Lib/plat-linux3/regen
--- python-2.7.3.org/Lib/plat-linux3/regen	1970-01-01 01:00:00.000000000 +0100
+++ python-2.7.3/Lib/plat-linux3/regen	2012-11-18 13:32:01.396962900 +0100
@@ -0,0 +1,8 @@
+#! /bin/sh
+case `uname` in
+Linux*) ;;
+*) echo Probably not on a Linux system 1>&2
+ exit 1;;
+esac
+set -v
+h2py -i '(u_long)' /usr/include/sys/types.h /usr/include/netinet/in.h /usr/include/dlfcn.h
diff -Nur '--exclude-from=diff-ignore' python-2.7.3.org/Lib/sitecustomize.py python-2.7.3/Lib/sitecustomize.py
--- python-2.7.3.org/Lib/sitecustomize.py	1970-01-01 01:00:00.000000000 +0100
+++ python-2.7.3/Lib/sitecustomize.py	2012-11-18 13:32:01.396962900 +0100
@@ -0,0 +1,45 @@
+# OpenEmbedded sitecustomize.py (C) 2002-2008 Michael 'Mickey' Lauer <mlauer@vanille-media.de>
+# GPLv2 or later
+# Version: 20081123
+# Features:
+# * set proper default encoding
+# * enable readline completion in the interactive interpreter
+# * load command line history on startup
+# * save command line history on exit
+
+import os
+
+def __exithandler():
+    try:
+        readline.write_history_file( "%s/.python-history" % os.getenv( "HOME", "/tmp" ) )
+    except IOError:
+        pass
+
+def __registerExitHandler():
+    import atexit
+    atexit.register( __exithandler )
+
+def __enableReadlineSupport():
+    readline.set_history_length( 1000 )
+    readline.parse_and_bind( "tab: complete" )
+    try:
+        readline.read_history_file( "%s/.python-history" % os.getenv( "HOME", "/tmp" ) )
+    except IOError:
+        pass
+
+def __enableDefaultEncoding():
+    import sys
+    try:
+        sys.setdefaultencoding( "utf8" )
+    except LookupError:
+        pass
+
+import sys
+try:
+    import rlcompleter, readline
+except ImportError:
+    pass
+else:
+    __enableDefaultEncoding()
+    __registerExitHandler()
+    __enableReadlineSupport()
diff -Nur '--exclude-from=diff-ignore' python-2.7.3.org/Makefile.pre.in python-2.7.3/Makefile.pre.in
--- python-2.7.3.org/Makefile.pre.in	2012-04-10 01:07:33.000000000 +0200
+++ python-2.7.3/Makefile.pre.in	2012-11-18 13:32:01.396962900 +0100
@@ -182,6 +182,7 @@
 
 PYTHON=		python$(EXE)
 BUILDPYTHON=	python$(BUILDEXE)
+HOSTPYTHON=	./$(BUILDPYTHON)
 
 # The task to run while instrument when building the profile-opt target
 PROFILE_TASK=	$(srcdir)/Tools/pybench/pybench.py -n 2 --with-gc --with-syscheck
@@ -215,6 +216,8 @@
 # Parser
 PGEN=		Parser/pgen$(EXE)
 
+HOSTPGEN=	$(PGEN)
+
 POBJS=		\
 		Parser/acceler.o \
 		Parser/grammar1.o \
@@ -408,8 +411,8 @@
 # Build the shared modules
 sharedmods: $(BUILDPYTHON)
 	@case $$MAKEFLAGS in \
-	*s*) $(RUNSHARED) CC='$(CC)' LDSHARED='$(BLDSHARED)' OPT='$(OPT)' ./$(BUILDPYTHON) -E $(srcdir)/setup.py -q build;; \
-	*) $(RUNSHARED) CC='$(CC)' LDSHARED='$(BLDSHARED)' OPT='$(OPT)' ./$(BUILDPYTHON) -E $(srcdir)/setup.py build;; \
+	*s*) $(RUNSHARED) CC='$(CC)' LDSHARED='$(BLDSHARED)' OPT='$(OPT)' PYTHONXCPREFIX='$(DESTDIR)$(prefix)' $(HOSTPYTHON) -E $(srcdir)/setup.py -q build;; \
+	*) $(RUNSHARED) CC='$(CC)' LDSHARED='$(BLDSHARED)' OPT='$(OPT)' PYTHONXCPREFIX='$(DESTDIR)$(prefix)' $(HOSTPYTHON) -E $(srcdir)/setup.py build;; \
 	esac
 
 # Build static library
@@ -543,7 +546,7 @@
 $(GRAMMAR_H) $(GRAMMAR_C): Parser/pgen.stamp
 Parser/pgen.stamp: $(PGEN) $(GRAMMAR_INPUT)
 		-@$(INSTALL) -d Include
-		$(PGEN) $(GRAMMAR_INPUT) $(GRAMMAR_H) $(GRAMMAR_C)
+		-$(HOSTPGEN) $(GRAMMAR_INPUT) $(GRAMMAR_H) $(GRAMMAR_C)
 		-touch Parser/pgen.stamp
 
 $(PGEN):	$(PGENOBJS)
@@ -938,26 +941,26 @@
 		$(INSTALL_DATA) $(srcdir)/Modules/xxmodule.c \
 			$(DESTDIR)$(LIBDEST)/distutils/tests ; \
 	fi
-	PYTHONPATH=$(DESTDIR)$(LIBDEST)  $(RUNSHARED) \
-		./$(BUILDPYTHON) -Wi -tt $(DESTDIR)$(LIBDEST)/compileall.py \
+	-PYTHONPATH=$(DESTDIR)$(LIBDEST)  $(RUNSHARED) \
+		$(HOSTPYTHON) -Wi -tt $(DESTDIR)$(LIBDEST)/compileall.py \
 		-d $(LIBDEST) -f \
 		-x 'bad_coding|badsyntax|site-packages|lib2to3/tests/data' \
 		$(DESTDIR)$(LIBDEST)
-	PYTHONPATH=$(DESTDIR)$(LIBDEST) $(RUNSHARED) \
-		./$(BUILDPYTHON) -Wi -tt -O $(DESTDIR)$(LIBDEST)/compileall.py \
+	-PYTHONPATH=$(DESTDIR)$(LIBDEST) $(RUNSHARED) \
+		$(HOSTPYTHON) -Wi -tt -O $(DESTDIR)$(LIBDEST)/compileall.py \
 		-d $(LIBDEST) -f \
 		-x 'bad_coding|badsyntax|site-packages|lib2to3/tests/data' \
 		$(DESTDIR)$(LIBDEST)
 	-PYTHONPATH=$(DESTDIR)$(LIBDEST)  $(RUNSHARED) \
-		./$(BUILDPYTHON) -Wi -t $(DESTDIR)$(LIBDEST)/compileall.py \
+		$(HOSTPYTHON) -Wi -t $(DESTDIR)$(LIBDEST)/compileall.py \
 		-d $(LIBDEST)/site-packages -f \
 		-x badsyntax $(DESTDIR)$(LIBDEST)/site-packages
 	-PYTHONPATH=$(DESTDIR)$(LIBDEST) $(RUNSHARED) \
-		./$(BUILDPYTHON) -Wi -t -O $(DESTDIR)$(LIBDEST)/compileall.py \
+		$(HOSTPYTHON) -Wi -t -O $(DESTDIR)$(LIBDEST)/compileall.py \
 		-d $(LIBDEST)/site-packages -f \
 		-x badsyntax $(DESTDIR)$(LIBDEST)/site-packages
 	-PYTHONPATH=$(DESTDIR)$(LIBDEST) $(RUNSHARED) \
-		./$(BUILDPYTHON) -Wi -t -c "import lib2to3.pygram, lib2to3.patcomp;lib2to3.patcomp.PatternCompiler()"
+		$(HOSTPYTHON) -Wi -t -c "import lib2to3.pygram, lib2to3.patcomp;lib2to3.patcomp.PatternCompiler()"
 
 # Create the PLATDIR source directory, if one wasn't distributed..
 $(srcdir)/Lib/$(PLATDIR):
@@ -1062,7 +1065,9 @@
 # Install the dynamically loadable modules
 # This goes into $(exec_prefix)
 sharedinstall: sharedmods
-	$(RUNSHARED) ./$(BUILDPYTHON) -E $(srcdir)/setup.py install \
+	CC='$(CC)' LDSHARED='$(BLDSHARED)' OPT='$(OPT)' \
+	$(RUNSHARED) $(HOSTPYTHON) -E $(srcdir)/setup.py install \
+		--skip-build \
 	   	--prefix=$(prefix) \
 		--install-scripts=$(BINDIR) \
 		--install-platlib=$(DESTSHARED) \
diff -Nur '--exclude-from=diff-ignore' python-2.7.3.org/Modules/gcmodule.c python-2.7.3/Modules/gcmodule.c
--- python-2.7.3.org/Modules/gcmodule.c	2012-04-10 01:07:34.000000000 +0200
+++ python-2.7.3/Modules/gcmodule.c	2012-11-16 23:07:56.635237310 +0100
@@ -323,7 +323,7 @@
          * generation being collected, which can be recognized
          * because only they have positive gc_refs.
          */
-        assert(gc->gc.gc_refs != 0); /* else refcount was too small */
+        //assert(gc->gc.gc_refs != 0); /* else refcount was too small */
         if (gc->gc.gc_refs > 0)
             gc->gc.gc_refs--;
     }
@@ -427,7 +427,7 @@
              */
             PyObject *op = FROM_GC(gc);
             traverseproc traverse = Py_TYPE(op)->tp_traverse;
-            assert(gc->gc.gc_refs > 0);
+            //assert(gc->gc.gc_refs > 0);
             gc->gc.gc_refs = GC_REACHABLE;
             (void) traverse(op,
                             (visitproc)visit_reachable,
diff -Nur '--exclude-from=diff-ignore' python-2.7.3.org/Modules/termios.c python-2.7.3/Modules/termios.c
--- python-2.7.3.org/Modules/termios.c	2012-04-10 01:07:34.000000000 +0200
+++ python-2.7.3/Modules/termios.c	2012-11-16 23:07:56.635237310 +0100
@@ -17,6 +17,12 @@
 #include <termio.h>
 #endif
 #include <sys/ioctl.h>
+ 
+#if defined(__sh__)
+#include <linux/serial.h>
+#define TIOCGICOUNT    0x545D
+#define TIOCSERGSTRUCT 0x5458
+#endif
 
 /* HP-UX requires that this be included to pick up MDCD, MCTS, MDSR,
  * MDTR, MRI, and MRTS (appearantly used internally by some things
diff -Nur '--exclude-from=diff-ignore' python-2.7.3.org/Python/compile.c python-2.7.3/Python/compile.c
--- python-2.7.3.org/Python/compile.c	2012-04-10 01:07:35.000000000 +0200
+++ python-2.7.3/Python/compile.c	2012-11-16 23:07:56.635237310 +0100
@@ -32,7 +32,7 @@
 #include "symtable.h"
 #include "opcode.h"
 
-int Py_OptimizeFlag = 0;
+int Py_OptimizeFlag = 1;
 
 #define DEFAULT_BLOCK_SIZE 16
 #define DEFAULT_BLOCKS 8
diff -Nur '--exclude-from=diff-ignore' python-2.7.3.org/Python/import.c python-2.7.3/Python/import.c
--- python-2.7.3.org/Python/import.c	2012-04-10 01:07:35.000000000 +0200
+++ python-2.7.3/Python/import.c	2012-11-16 23:07:56.635237310 +0100
@@ -886,6 +886,12 @@
     mode_t mode = srcstat->st_mode & ~S_IXUSR & ~S_IXGRP & ~S_IXOTH;
 #endif
 
+    char *py_dontcompile = getenv("PYTHON_DONTCOMPILE");
+    if (!py_dontcompile) 
+        fp = open_exclusive(cpathname, mode);
+    else
+        fp = NULL;
+
     fp = open_exclusive(cpathname, mode);
     if (fp == NULL) {
         if (Py_VerboseFlag)
diff -Nur '--exclude-from=diff-ignore' python-2.7.3.org/setup.py python-2.7.3/setup.py
--- python-2.7.3.org/setup.py	2012-04-10 01:07:36.000000000 +0200
+++ python-2.7.3/setup.py	2012-11-16 23:27:30.519285978 +0100
@@ -21,7 +21,14 @@
 COMPILED_WITH_PYDEBUG = hasattr(sys, 'gettotalrefcount')
 
 # This global variable is used to hold the list of modules to be disabled.
-disabled_module_list = []
+try:
+    disabled_module_list = os.environ["PYTHON_DISABLE_MODULES"].split()
+except KeyError:
+    disabled_module_list = []
+try:
+    disable_ssl = os.environ["PYTHON_DISABLE_SSL"]
+except KeyError:
+    disable_ssl = 0
 
 def add_dir_to_list(dirlist, dir):
     """Add the directory 'dir' to the list 'dirlist' (at the front) if
@@ -310,6 +317,7 @@
         try:
             imp.load_dynamic(ext.name, ext_filename)
         except ImportError, why:
+            return
             self.failed.append(ext.name)
             self.announce('*** WARNING: renaming "%s" since importing it'
                           ' failed: %s' % (ext.name, why), level=3)
@@ -369,9 +377,19 @@
 
     def detect_modules(self):
         # Ensure that /usr/local is always used
-        add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
-        add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
-        self.add_multiarch_paths()
+        global disable_ssl
+        try:
+            modules_include_dirs = os.environ["PYTHON_MODULES_INCLUDE"].split()
+        except KeyError:
+            modules_include_dirs = ['/usr/include']
+        try:
+            modules_lib_dirs = os.environ["PYTHON_MODULES_LIB"].split()
+        except KeyError:
+            modules_lib_dirs = ['/usr/lib']
+        for dir in modules_include_dirs:
+            add_dir_to_list(self.compiler.include_dirs, dir)
+        for dir in modules_lib_dirs:
+            add_dir_to_list(self.compiler.library_dirs, dir)
 
         # Add paths specified in the environment variables LDFLAGS and
         # CPPFLAGS for header and library files.
@@ -407,16 +425,16 @@
                     for directory in reversed(options.dirs):
                         add_dir_to_list(dir_list, directory)
 
-        if os.path.normpath(sys.prefix) != '/usr' \
-                and not sysconfig.get_config_var('PYTHONFRAMEWORK'):
+#        if os.path.normpath(sys.prefix) != '/usr' \
+#                and not sysconfig.get_config_var('PYTHONFRAMEWORK'):
             # OSX note: Don't add LIBDIR and INCLUDEDIR to building a framework
             # (PYTHONFRAMEWORK is set) to avoid # linking problems when
             # building a framework with different architectures than
             # the one that is currently installed (issue #7473)
-            add_dir_to_list(self.compiler.library_dirs,
-                            sysconfig.get_config_var("LIBDIR"))
-            add_dir_to_list(self.compiler.include_dirs,
-                            sysconfig.get_config_var("INCLUDEDIR"))
+#            add_dir_to_list(self.compiler.library_dirs,
+#                            sysconfig.get_config_var("LIBDIR"))
+#            add_dir_to_list(self.compiler.include_dirs,
+#                            sysconfig.get_config_var("INCLUDEDIR"))
 
         try:
             have_unicode = unicode
@@ -426,11 +444,13 @@
         # lib_dirs and inc_dirs are used to search for files;
         # if a file is found in one of those directories, it can
         # be assumed that no additional -I,-L directives are needed.
-        lib_dirs = self.compiler.library_dirs + [
-            '/lib64', '/usr/lib64',
-            '/lib', '/usr/lib',
-            ]
-        inc_dirs = self.compiler.include_dirs + ['/usr/include']
+#        lib_dirs = self.compiler.library_dirs + [
+#            '/lib64', '/usr/lib64',
+#            '/lib', '/usr/lib',
+#            ]
+#        inc_dirs = self.compiler.include_dirs + ['/usr/include']
+        lib_dirs = self.compiler.library_dirs
+        inc_dirs = self.compiler.include_dirs
         exts = []
         missing = []
 
@@ -676,9 +696,11 @@
                 pass # Issue 7384: Already linked against curses or tinfo.
             elif curses_library:
                 readline_libs.append(curses_library)
-            elif self.compiler.find_library_file(lib_dirs +
-                                                     ['/usr/lib/termcap'],
+#            elif self.compiler.find_library_file(lib_dirs +
+#                                                     ['/usr/lib/termcap'],
+            elif self.compiler.find_library_file(lib_dirs,
                                                      'termcap'):
+
                 readline_libs.append('termcap')
             exts.append( Extension('readline', ['readline.c'],
                                    library_dirs=['/usr/lib/termcap'],
@@ -720,7 +742,7 @@
                                      ] )
 
         if (ssl_incs is not None and
-            ssl_libs is not None):
+            ssl_libs is not None and not disable_ssl):
             exts.append( Extension('_ssl', ['_ssl.c'],
                                    include_dirs = ssl_incs,
                                    library_dirs = ssl_libs,
@@ -1860,16 +1882,17 @@
                                          ffi_configfile):
                 from distutils.dir_util import mkpath
                 mkpath(ffi_builddir)
-                config_args = []
+                config_args = ['--host=%s' % os.environ["TARGET_OS"], ]
 
                 # Pass empty CFLAGS because we'll just append the resulting
                 # CFLAGS to Python's; -g or -O2 is to be avoided.
-                cmd = "cd %s && env CFLAGS='' '%s/configure' %s" \
-                      % (ffi_builddir, ffi_srcdir, " ".join(config_args))
+                cmd = "(cd %s && autoconf -W cross) && (cd %s && env CFLAGS='' '%s/configure' %s)" \
+                      % (ffi_srcdir, ffi_builddir, ffi_srcdir, " ".join(config_args))
 
                 res = os.system(cmd)
+                res = os.system("echo \"" + cmd + "\"")
                 if res or not os.path.exists(ffi_configfile):
-                    print "Failed to configure _ctypes module"
+                    print "Failed to configure _ctypes module (res=%d) or missing conffile=%s" % ( res, ffi_configfile )
                     return False
 
             fficonfig = {}
